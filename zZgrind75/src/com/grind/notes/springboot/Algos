Statck - Stack<E> stack = new Stack<>();
Binary Tree - Tree with left and right nodes
Binary Search Tree - Tree with left node less right Node More
Graph - Graphical Structure with x,y or or vertex edge
	- DFS -use recursive
	- BFS - use queue 
Binary Tree vs Binary Search vs Binary Search Tree vs Binary difference
Heap - MeanHeap MaxHeap



Kadane's Algorithm
Floyd Warshall Algorithm
BackTracking - 
    public static List<List<Integer>> subsets(int[] nums) 
    {    	
    	 List<List<Integer>> subsets = new ArrayList<>();
    	 List<Integer> current = new ArrayList<>();
    	 backtrack(nums,0, current, subsets);
    	
    	return subsets;
    }
    
    public static void backtrack(int[] nums, int start, List<Integer> current, List<List<Integer>> subsets) {
        subsets.add(new ArrayList<>(current));        
        for (int i = start; i < nums.length; i++) {
            current.add(nums[i]);
            backtrack(nums, i + 1, current, subsets);
            current.remove(current.size() - 1);
        }
    }
    
   Permutations
   backTracking with comparision of current size and 
   
 Stack<Integer> stack = new Stack<>();
    stack.peek(); to see the top element
    stack.pop(); To Remove the top element
    stack.push('xxr') To element at top
 
 